// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: member.sql

package model

import (
	"context"
	"database/sql"
	"time"

	"cs-api/pkg/types"
)

const createMember = `-- name: CreateMember :execresult
INSERT INTO member (type, site_id, name, device_id, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateMemberParams struct {
	Type      types.MemberType `db:"type" json:"type"`
	SiteID    int64            `db:"site_id" json:"site_id"`
	Name      string           `db:"name" json:"name"`
	DeviceID  string           `db:"device_id" json:"device_id"`
	CreatedAt time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt time.Time        `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateMember(ctx context.Context, arg CreateMemberParams) (sql.Result, error) {
	return q.exec(ctx, q.createMemberStmt, createMember,
		arg.Type,
		arg.SiteID,
		arg.Name,
		arg.DeviceID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const getGuestMember = `-- name: GetGuestMember :one
select id, type, site_id, name, device_id, real_name, mobile, email, note, online_status, created_at, updated_at
from member
where type = 2
  and device_id = ?
  and site_id = ? LIMIT 1
`

type GetGuestMemberParams struct {
	DeviceID string `db:"device_id" json:"device_id"`
	SiteID   int64  `db:"site_id" json:"site_id"`
}

func (q *Queries) GetGuestMember(ctx context.Context, arg GetGuestMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.getGuestMemberStmt, getGuestMember, arg.DeviceID, arg.SiteID)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.SiteID,
		&i.Name,
		&i.DeviceID,
		&i.RealName,
		&i.Mobile,
		&i.Email,
		&i.Note,
		&i.OnlineStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNormalMember = `-- name: GetNormalMember :one
select id, type, site_id, name, device_id, real_name, mobile, email, note, online_status, created_at, updated_at
from member
where type = 1
  and site_id = ?
  and name = ? LIMIT 1
`

type GetNormalMemberParams struct {
	SiteID int64  `db:"site_id" json:"site_id"`
	Name   string `db:"name" json:"name"`
}

func (q *Queries) GetNormalMember(ctx context.Context, arg GetNormalMemberParams) (Member, error) {
	row := q.queryRow(ctx, q.getNormalMemberStmt, getNormalMember, arg.SiteID, arg.Name)
	var i Member
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.SiteID,
		&i.Name,
		&i.DeviceID,
		&i.RealName,
		&i.Mobile,
		&i.Email,
		&i.Note,
		&i.OnlineStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateMemberInfo = `-- name: UpdateMemberInfo :exec
update member
set real_name  = ?,
    email      = ?,
    mobile     = ?,
    note       = ?,
    updated_at = ?
where id = ?
`

type UpdateMemberInfoParams struct {
	RealName  string    `db:"real_name" json:"real_name"`
	Email     string    `db:"email" json:"email"`
	Mobile    string    `db:"mobile" json:"mobile"`
	Note      string    `db:"note" json:"note"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
	ID        int64     `db:"id" json:"id"`
}

func (q *Queries) UpdateMemberInfo(ctx context.Context, arg UpdateMemberInfoParams) error {
	_, err := q.exec(ctx, q.updateMemberInfoStmt, updateMemberInfo,
		arg.RealName,
		arg.Email,
		arg.Mobile,
		arg.Note,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateOnlineStatus = `-- name: UpdateOnlineStatus :exec
update member
set online_status = ?
where id = ?
`

type UpdateOnlineStatusParams struct {
	OnlineStatus types.MemberOnlineStatus `db:"online_status" json:"online_status"`
	ID           int64                    `db:"id" json:"id"`
}

func (q *Queries) UpdateOnlineStatus(ctx context.Context, arg UpdateOnlineStatusParams) error {
	_, err := q.exec(ctx, q.updateOnlineStatusStmt, updateOnlineStatus, arg.OnlineStatus, arg.ID)
	return err
}
