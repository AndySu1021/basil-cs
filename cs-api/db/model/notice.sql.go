// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: notice.sql

package model

import (
	"context"
	"time"

	"cs-api/internal/types"
)

const createNotice = `-- name: CreateNotice :exec
INSERT INTO notice (title, content, start_at, end_at, status, created_by, created_at, updated_by, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateNoticeParams struct {
	Title     string       `db:"title" json:"title"`
	Content   string       `db:"content" json:"content"`
	StartAt   time.Time    `db:"start_at" json:"start_at"`
	EndAt     time.Time    `db:"end_at" json:"end_at"`
	Status    types.Status `db:"status" json:"status"`
	CreatedBy int64        `db:"created_by" json:"created_by"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateNotice(ctx context.Context, arg CreateNoticeParams) error {
	_, err := q.exec(ctx, q.createNoticeStmt, createNotice,
		arg.Title,
		arg.Content,
		arg.StartAt,
		arg.EndAt,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const deleteNotice = `-- name: DeleteNotice :exec
DELETE
FROM notice
WHERE id = ?
`

func (q *Queries) DeleteNotice(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteNoticeStmt, deleteNotice, id)
	return err
}

const getLatestNotice = `-- name: GetLatestNotice :one
SELECT title, content
FROM notice
WHERE now() >= start_at
  AND now() <= end_at
  and status = 1
ORDER BY end_at
    LIMIT 1
`

type GetLatestNoticeRow struct {
	Title   string `db:"title" json:"title"`
	Content string `db:"content" json:"content"`
}

func (q *Queries) GetLatestNotice(ctx context.Context) (GetLatestNoticeRow, error) {
	row := q.queryRow(ctx, q.getLatestNoticeStmt, getLatestNotice)
	var i GetLatestNoticeRow
	err := row.Scan(&i.Title, &i.Content)
	return i, err
}

const getNotice = `-- name: GetNotice :one
SELECT id, title, content, start_at, end_at, status, created_by, created_at, updated_by, updated_at
FROM notice
WHERE id = ? LIMIT 1
`

func (q *Queries) GetNotice(ctx context.Context, id int64) (Notice, error) {
	row := q.queryRow(ctx, q.getNoticeStmt, getNotice, id)
	var i Notice
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		&i.StartAt,
		&i.EndAt,
		&i.Status,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedBy,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNotice = `-- name: UpdateNotice :exec
UPDATE notice
SET title      = ?,
    content    = ?,
    start_at   = ?,
    end_at     = ?,
    status     = ?,
    updated_by = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateNoticeParams struct {
	Title     string       `db:"title" json:"title"`
	Content   string       `db:"content" json:"content"`
	StartAt   time.Time    `db:"start_at" json:"start_at"`
	EndAt     time.Time    `db:"end_at" json:"end_at"`
	Status    types.Status `db:"status" json:"status"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
	ID        int64        `db:"id" json:"id"`
}

func (q *Queries) UpdateNotice(ctx context.Context, arg UpdateNoticeParams) error {
	_, err := q.exec(ctx, q.updateNoticeStmt, updateNotice,
		arg.Title,
		arg.Content,
		arg.StartAt,
		arg.EndAt,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
