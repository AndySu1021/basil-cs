// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package model

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.acceptRoomStmt, err = db.PrepareContext(ctx, acceptRoom); err != nil {
		return nil, fmt.Errorf("error preparing query AcceptRoom: %w", err)
	}
	if q.checkFastReplyCategoryStmt, err = db.PrepareContext(ctx, checkFastReplyCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CheckFastReplyCategory: %w", err)
	}
	if q.closeRoomStmt, err = db.PrepareContext(ctx, closeRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CloseRoom: %w", err)
	}
	if q.constantSeederStmt, err = db.PrepareContext(ctx, constantSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query ConstantSeeder: %w", err)
	}
	if q.createFAQStmt, err = db.PrepareContext(ctx, createFAQ); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFAQ: %w", err)
	}
	if q.createFastReplyStmt, err = db.PrepareContext(ctx, createFastReply); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFastReply: %w", err)
	}
	if q.createFastReplyCategoryStmt, err = db.PrepareContext(ctx, createFastReplyCategory); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFastReplyCategory: %w", err)
	}
	if q.createMemberStmt, err = db.PrepareContext(ctx, createMember); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMember: %w", err)
	}
	if q.createMessageStmt, err = db.PrepareContext(ctx, createMessage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateMessage: %w", err)
	}
	if q.createNoticeStmt, err = db.PrepareContext(ctx, createNotice); err != nil {
		return nil, fmt.Errorf("error preparing query CreateNotice: %w", err)
	}
	if q.createRemindStmt, err = db.PrepareContext(ctx, createRemind); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRemind: %w", err)
	}
	if q.createRoleStmt, err = db.PrepareContext(ctx, createRole); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRole: %w", err)
	}
	if q.createRoomStmt, err = db.PrepareContext(ctx, createRoom); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRoom: %w", err)
	}
	if q.createSiteStmt, err = db.PrepareContext(ctx, createSite); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSite: %w", err)
	}
	if q.createStaffStmt, err = db.PrepareContext(ctx, createStaff); err != nil {
		return nil, fmt.Errorf("error preparing query CreateStaff: %w", err)
	}
	if q.createTagStmt, err = db.PrepareContext(ctx, createTag); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTag: %w", err)
	}
	if q.deleteFAQStmt, err = db.PrepareContext(ctx, deleteFAQ); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFAQ: %w", err)
	}
	if q.deleteFastReplyStmt, err = db.PrepareContext(ctx, deleteFastReply); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFastReply: %w", err)
	}
	if q.deleteNoticeStmt, err = db.PrepareContext(ctx, deleteNotice); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteNotice: %w", err)
	}
	if q.deleteRemindStmt, err = db.PrepareContext(ctx, deleteRemind); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRemind: %w", err)
	}
	if q.deleteRoleStmt, err = db.PrepareContext(ctx, deleteRole); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRole: %w", err)
	}
	if q.deleteSiteStmt, err = db.PrepareContext(ctx, deleteSite); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSite: %w", err)
	}
	if q.deleteStaffStmt, err = db.PrepareContext(ctx, deleteStaff); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteStaff: %w", err)
	}
	if q.deleteTagStmt, err = db.PrepareContext(ctx, deleteTag); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteTag: %w", err)
	}
	if q.getAllAvailableFastReplyStmt, err = db.PrepareContext(ctx, getAllAvailableFastReply); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllAvailableFastReply: %w", err)
	}
	if q.getAllRolesStmt, err = db.PrepareContext(ctx, getAllRoles); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllRoles: %w", err)
	}
	if q.getAllStaffsStmt, err = db.PrepareContext(ctx, getAllStaffs); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllStaffs: %w", err)
	}
	if q.getAllTagStmt, err = db.PrepareContext(ctx, getAllTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllTag: %w", err)
	}
	if q.getCsConfigStmt, err = db.PrepareContext(ctx, getCsConfig); err != nil {
		return nil, fmt.Errorf("error preparing query GetCsConfig: %w", err)
	}
	if q.getFAQStmt, err = db.PrepareContext(ctx, getFAQ); err != nil {
		return nil, fmt.Errorf("error preparing query GetFAQ: %w", err)
	}
	if q.getFastReplyStmt, err = db.PrepareContext(ctx, getFastReply); err != nil {
		return nil, fmt.Errorf("error preparing query GetFastReply: %w", err)
	}
	if q.getGuestMemberStmt, err = db.PrepareContext(ctx, getGuestMember); err != nil {
		return nil, fmt.Errorf("error preparing query GetGuestMember: %w", err)
	}
	if q.getLastRoomMessageStmt, err = db.PrepareContext(ctx, getLastRoomMessage); err != nil {
		return nil, fmt.Errorf("error preparing query GetLastRoomMessage: %w", err)
	}
	if q.getLatestNoticeStmt, err = db.PrepareContext(ctx, getLatestNotice); err != nil {
		return nil, fmt.Errorf("error preparing query GetLatestNotice: %w", err)
	}
	if q.getMemberAvailableRoomStmt, err = db.PrepareContext(ctx, getMemberAvailableRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetMemberAvailableRoom: %w", err)
	}
	if q.getNormalMemberStmt, err = db.PrepareContext(ctx, getNormalMember); err != nil {
		return nil, fmt.Errorf("error preparing query GetNormalMember: %w", err)
	}
	if q.getNoticeStmt, err = db.PrepareContext(ctx, getNotice); err != nil {
		return nil, fmt.Errorf("error preparing query GetNotice: %w", err)
	}
	if q.getOnlineStaffCountStmt, err = db.PrepareContext(ctx, getOnlineStaffCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetOnlineStaffCount: %w", err)
	}
	if q.getQueuingRoomCountStmt, err = db.PrepareContext(ctx, getQueuingRoomCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetQueuingRoomCount: %w", err)
	}
	if q.getRemindStmt, err = db.PrepareContext(ctx, getRemind); err != nil {
		return nil, fmt.Errorf("error preparing query GetRemind: %w", err)
	}
	if q.getRoleStmt, err = db.PrepareContext(ctx, getRole); err != nil {
		return nil, fmt.Errorf("error preparing query GetRole: %w", err)
	}
	if q.getRoomStmt, err = db.PrepareContext(ctx, getRoom); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoom: %w", err)
	}
	if q.getRoomInfoStmt, err = db.PrepareContext(ctx, getRoomInfo); err != nil {
		return nil, fmt.Errorf("error preparing query GetRoomInfo: %w", err)
	}
	if q.getServingRoomCountStmt, err = db.PrepareContext(ctx, getServingRoomCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetServingRoomCount: %w", err)
	}
	if q.getSiteStmt, err = db.PrepareContext(ctx, getSite); err != nil {
		return nil, fmt.Errorf("error preparing query GetSite: %w", err)
	}
	if q.getSiteByCodeStmt, err = db.PrepareContext(ctx, getSiteByCode); err != nil {
		return nil, fmt.Errorf("error preparing query GetSiteByCode: %w", err)
	}
	if q.getStaffStmt, err = db.PrepareContext(ctx, getStaff); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaff: %w", err)
	}
	if q.getStaffCountByRoleIdStmt, err = db.PrepareContext(ctx, getStaffCountByRoleId); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaffCountByRoleId: %w", err)
	}
	if q.getStaffServingRoomCountStmt, err = db.PrepareContext(ctx, getStaffServingRoomCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetStaffServingRoomCount: %w", err)
	}
	if q.getTagStmt, err = db.PrepareContext(ctx, getTag); err != nil {
		return nil, fmt.Errorf("error preparing query GetTag: %w", err)
	}
	if q.listActiveRemindStmt, err = db.PrepareContext(ctx, listActiveRemind); err != nil {
		return nil, fmt.Errorf("error preparing query ListActiveRemind: %w", err)
	}
	if q.listAvailableFAQStmt, err = db.PrepareContext(ctx, listAvailableFAQ); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailableFAQ: %w", err)
	}
	if q.listAvailableStaffStmt, err = db.PrepareContext(ctx, listAvailableStaff); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailableStaff: %w", err)
	}
	if q.listAvailableTagStmt, err = db.PrepareContext(ctx, listAvailableTag); err != nil {
		return nil, fmt.Errorf("error preparing query ListAvailableTag: %w", err)
	}
	if q.listFastReplyCategoryStmt, err = db.PrepareContext(ctx, listFastReplyCategory); err != nil {
		return nil, fmt.Errorf("error preparing query ListFastReplyCategory: %w", err)
	}
	if q.listMemberRoomMessageStmt, err = db.PrepareContext(ctx, listMemberRoomMessage); err != nil {
		return nil, fmt.Errorf("error preparing query ListMemberRoomMessage: %w", err)
	}
	if q.listQueuingRoomStmt, err = db.PrepareContext(ctx, listQueuingRoom); err != nil {
		return nil, fmt.Errorf("error preparing query ListQueuingRoom: %w", err)
	}
	if q.listReportDailyStaffStmt, err = db.PrepareContext(ctx, listReportDailyStaff); err != nil {
		return nil, fmt.Errorf("error preparing query ListReportDailyStaff: %w", err)
	}
	if q.listReportDailyTagStmt, err = db.PrepareContext(ctx, listReportDailyTag); err != nil {
		return nil, fmt.Errorf("error preparing query ListReportDailyTag: %w", err)
	}
	if q.listSiteStmt, err = db.PrepareContext(ctx, listSite); err != nil {
		return nil, fmt.Errorf("error preparing query ListSite: %w", err)
	}
	if q.listStaffRoomMessageStmt, err = db.PrepareContext(ctx, listStaffRoomMessage); err != nil {
		return nil, fmt.Errorf("error preparing query ListStaffRoomMessage: %w", err)
	}
	if q.listStaffServingRoomStmt, err = db.PrepareContext(ctx, listStaffServingRoom); err != nil {
		return nil, fmt.Errorf("error preparing query ListStaffServingRoom: %w", err)
	}
	if q.roleSeederStmt, err = db.PrepareContext(ctx, roleSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query RoleSeeder: %w", err)
	}
	if q.staffLoginStmt, err = db.PrepareContext(ctx, staffLogin); err != nil {
		return nil, fmt.Errorf("error preparing query StaffLogin: %w", err)
	}
	if q.staffSeederStmt, err = db.PrepareContext(ctx, staffSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query StaffSeeder: %w", err)
	}
	if q.tagSeederStmt, err = db.PrepareContext(ctx, tagSeeder); err != nil {
		return nil, fmt.Errorf("error preparing query TagSeeder: %w", err)
	}
	if q.updateCsConfigStmt, err = db.PrepareContext(ctx, updateCsConfig); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateCsConfig: %w", err)
	}
	if q.updateFAQStmt, err = db.PrepareContext(ctx, updateFAQ); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFAQ: %w", err)
	}
	if q.updateFastReplyStmt, err = db.PrepareContext(ctx, updateFastReply); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateFastReply: %w", err)
	}
	if q.updateMemberInfoStmt, err = db.PrepareContext(ctx, updateMemberInfo); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateMemberInfo: %w", err)
	}
	if q.updateNoticeStmt, err = db.PrepareContext(ctx, updateNotice); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateNotice: %w", err)
	}
	if q.updateOnlineStatusStmt, err = db.PrepareContext(ctx, updateOnlineStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateOnlineStatus: %w", err)
	}
	if q.updateRemindStmt, err = db.PrepareContext(ctx, updateRemind); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRemind: %w", err)
	}
	if q.updateRoleStmt, err = db.PrepareContext(ctx, updateRole); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRole: %w", err)
	}
	if q.updateRoomScoreStmt, err = db.PrepareContext(ctx, updateRoomScore); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomScore: %w", err)
	}
	if q.updateRoomStaffStmt, err = db.PrepareContext(ctx, updateRoomStaff); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomStaff: %w", err)
	}
	if q.updateRoomStatusStmt, err = db.PrepareContext(ctx, updateRoomStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRoomStatus: %w", err)
	}
	if q.updateSiteStmt, err = db.PrepareContext(ctx, updateSite); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateSite: %w", err)
	}
	if q.updateStaffStmt, err = db.PrepareContext(ctx, updateStaff); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaff: %w", err)
	}
	if q.updateStaffAvatarStmt, err = db.PrepareContext(ctx, updateStaffAvatar); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffAvatar: %w", err)
	}
	if q.updateStaffLoginStmt, err = db.PrepareContext(ctx, updateStaffLogin); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffLogin: %w", err)
	}
	if q.updateStaffLogoutStmt, err = db.PrepareContext(ctx, updateStaffLogout); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffLogout: %w", err)
	}
	if q.updateStaffServingStatusStmt, err = db.PrepareContext(ctx, updateStaffServingStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffServingStatus: %w", err)
	}
	if q.updateStaffWithPasswordStmt, err = db.PrepareContext(ctx, updateStaffWithPassword); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateStaffWithPassword: %w", err)
	}
	if q.updateTagStmt, err = db.PrepareContext(ctx, updateTag); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTag: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.acceptRoomStmt != nil {
		if cerr := q.acceptRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing acceptRoomStmt: %w", cerr)
		}
	}
	if q.checkFastReplyCategoryStmt != nil {
		if cerr := q.checkFastReplyCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing checkFastReplyCategoryStmt: %w", cerr)
		}
	}
	if q.closeRoomStmt != nil {
		if cerr := q.closeRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing closeRoomStmt: %w", cerr)
		}
	}
	if q.constantSeederStmt != nil {
		if cerr := q.constantSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing constantSeederStmt: %w", cerr)
		}
	}
	if q.createFAQStmt != nil {
		if cerr := q.createFAQStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFAQStmt: %w", cerr)
		}
	}
	if q.createFastReplyStmt != nil {
		if cerr := q.createFastReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFastReplyStmt: %w", cerr)
		}
	}
	if q.createFastReplyCategoryStmt != nil {
		if cerr := q.createFastReplyCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFastReplyCategoryStmt: %w", cerr)
		}
	}
	if q.createMemberStmt != nil {
		if cerr := q.createMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMemberStmt: %w", cerr)
		}
	}
	if q.createMessageStmt != nil {
		if cerr := q.createMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createMessageStmt: %w", cerr)
		}
	}
	if q.createNoticeStmt != nil {
		if cerr := q.createNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createNoticeStmt: %w", cerr)
		}
	}
	if q.createRemindStmt != nil {
		if cerr := q.createRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRemindStmt: %w", cerr)
		}
	}
	if q.createRoleStmt != nil {
		if cerr := q.createRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoleStmt: %w", cerr)
		}
	}
	if q.createRoomStmt != nil {
		if cerr := q.createRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRoomStmt: %w", cerr)
		}
	}
	if q.createSiteStmt != nil {
		if cerr := q.createSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSiteStmt: %w", cerr)
		}
	}
	if q.createStaffStmt != nil {
		if cerr := q.createStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createStaffStmt: %w", cerr)
		}
	}
	if q.createTagStmt != nil {
		if cerr := q.createTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTagStmt: %w", cerr)
		}
	}
	if q.deleteFAQStmt != nil {
		if cerr := q.deleteFAQStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFAQStmt: %w", cerr)
		}
	}
	if q.deleteFastReplyStmt != nil {
		if cerr := q.deleteFastReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFastReplyStmt: %w", cerr)
		}
	}
	if q.deleteNoticeStmt != nil {
		if cerr := q.deleteNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteNoticeStmt: %w", cerr)
		}
	}
	if q.deleteRemindStmt != nil {
		if cerr := q.deleteRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRemindStmt: %w", cerr)
		}
	}
	if q.deleteRoleStmt != nil {
		if cerr := q.deleteRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRoleStmt: %w", cerr)
		}
	}
	if q.deleteSiteStmt != nil {
		if cerr := q.deleteSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSiteStmt: %w", cerr)
		}
	}
	if q.deleteStaffStmt != nil {
		if cerr := q.deleteStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteStaffStmt: %w", cerr)
		}
	}
	if q.deleteTagStmt != nil {
		if cerr := q.deleteTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteTagStmt: %w", cerr)
		}
	}
	if q.getAllAvailableFastReplyStmt != nil {
		if cerr := q.getAllAvailableFastReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllAvailableFastReplyStmt: %w", cerr)
		}
	}
	if q.getAllRolesStmt != nil {
		if cerr := q.getAllRolesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllRolesStmt: %w", cerr)
		}
	}
	if q.getAllStaffsStmt != nil {
		if cerr := q.getAllStaffsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllStaffsStmt: %w", cerr)
		}
	}
	if q.getAllTagStmt != nil {
		if cerr := q.getAllTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllTagStmt: %w", cerr)
		}
	}
	if q.getCsConfigStmt != nil {
		if cerr := q.getCsConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCsConfigStmt: %w", cerr)
		}
	}
	if q.getFAQStmt != nil {
		if cerr := q.getFAQStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFAQStmt: %w", cerr)
		}
	}
	if q.getFastReplyStmt != nil {
		if cerr := q.getFastReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFastReplyStmt: %w", cerr)
		}
	}
	if q.getGuestMemberStmt != nil {
		if cerr := q.getGuestMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getGuestMemberStmt: %w", cerr)
		}
	}
	if q.getLastRoomMessageStmt != nil {
		if cerr := q.getLastRoomMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLastRoomMessageStmt: %w", cerr)
		}
	}
	if q.getLatestNoticeStmt != nil {
		if cerr := q.getLatestNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLatestNoticeStmt: %w", cerr)
		}
	}
	if q.getMemberAvailableRoomStmt != nil {
		if cerr := q.getMemberAvailableRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMemberAvailableRoomStmt: %w", cerr)
		}
	}
	if q.getNormalMemberStmt != nil {
		if cerr := q.getNormalMemberStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNormalMemberStmt: %w", cerr)
		}
	}
	if q.getNoticeStmt != nil {
		if cerr := q.getNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getNoticeStmt: %w", cerr)
		}
	}
	if q.getOnlineStaffCountStmt != nil {
		if cerr := q.getOnlineStaffCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getOnlineStaffCountStmt: %w", cerr)
		}
	}
	if q.getQueuingRoomCountStmt != nil {
		if cerr := q.getQueuingRoomCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getQueuingRoomCountStmt: %w", cerr)
		}
	}
	if q.getRemindStmt != nil {
		if cerr := q.getRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRemindStmt: %w", cerr)
		}
	}
	if q.getRoleStmt != nil {
		if cerr := q.getRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoleStmt: %w", cerr)
		}
	}
	if q.getRoomStmt != nil {
		if cerr := q.getRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomStmt: %w", cerr)
		}
	}
	if q.getRoomInfoStmt != nil {
		if cerr := q.getRoomInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRoomInfoStmt: %w", cerr)
		}
	}
	if q.getServingRoomCountStmt != nil {
		if cerr := q.getServingRoomCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getServingRoomCountStmt: %w", cerr)
		}
	}
	if q.getSiteStmt != nil {
		if cerr := q.getSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSiteStmt: %w", cerr)
		}
	}
	if q.getSiteByCodeStmt != nil {
		if cerr := q.getSiteByCodeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSiteByCodeStmt: %w", cerr)
		}
	}
	if q.getStaffStmt != nil {
		if cerr := q.getStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffStmt: %w", cerr)
		}
	}
	if q.getStaffCountByRoleIdStmt != nil {
		if cerr := q.getStaffCountByRoleIdStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffCountByRoleIdStmt: %w", cerr)
		}
	}
	if q.getStaffServingRoomCountStmt != nil {
		if cerr := q.getStaffServingRoomCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getStaffServingRoomCountStmt: %w", cerr)
		}
	}
	if q.getTagStmt != nil {
		if cerr := q.getTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTagStmt: %w", cerr)
		}
	}
	if q.listActiveRemindStmt != nil {
		if cerr := q.listActiveRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listActiveRemindStmt: %w", cerr)
		}
	}
	if q.listAvailableFAQStmt != nil {
		if cerr := q.listAvailableFAQStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailableFAQStmt: %w", cerr)
		}
	}
	if q.listAvailableStaffStmt != nil {
		if cerr := q.listAvailableStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailableStaffStmt: %w", cerr)
		}
	}
	if q.listAvailableTagStmt != nil {
		if cerr := q.listAvailableTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listAvailableTagStmt: %w", cerr)
		}
	}
	if q.listFastReplyCategoryStmt != nil {
		if cerr := q.listFastReplyCategoryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listFastReplyCategoryStmt: %w", cerr)
		}
	}
	if q.listMemberRoomMessageStmt != nil {
		if cerr := q.listMemberRoomMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listMemberRoomMessageStmt: %w", cerr)
		}
	}
	if q.listQueuingRoomStmt != nil {
		if cerr := q.listQueuingRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listQueuingRoomStmt: %w", cerr)
		}
	}
	if q.listReportDailyStaffStmt != nil {
		if cerr := q.listReportDailyStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReportDailyStaffStmt: %w", cerr)
		}
	}
	if q.listReportDailyTagStmt != nil {
		if cerr := q.listReportDailyTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listReportDailyTagStmt: %w", cerr)
		}
	}
	if q.listSiteStmt != nil {
		if cerr := q.listSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listSiteStmt: %w", cerr)
		}
	}
	if q.listStaffRoomMessageStmt != nil {
		if cerr := q.listStaffRoomMessageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStaffRoomMessageStmt: %w", cerr)
		}
	}
	if q.listStaffServingRoomStmt != nil {
		if cerr := q.listStaffServingRoomStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listStaffServingRoomStmt: %w", cerr)
		}
	}
	if q.roleSeederStmt != nil {
		if cerr := q.roleSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing roleSeederStmt: %w", cerr)
		}
	}
	if q.staffLoginStmt != nil {
		if cerr := q.staffLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing staffLoginStmt: %w", cerr)
		}
	}
	if q.staffSeederStmt != nil {
		if cerr := q.staffSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing staffSeederStmt: %w", cerr)
		}
	}
	if q.tagSeederStmt != nil {
		if cerr := q.tagSeederStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing tagSeederStmt: %w", cerr)
		}
	}
	if q.updateCsConfigStmt != nil {
		if cerr := q.updateCsConfigStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateCsConfigStmt: %w", cerr)
		}
	}
	if q.updateFAQStmt != nil {
		if cerr := q.updateFAQStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFAQStmt: %w", cerr)
		}
	}
	if q.updateFastReplyStmt != nil {
		if cerr := q.updateFastReplyStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateFastReplyStmt: %w", cerr)
		}
	}
	if q.updateMemberInfoStmt != nil {
		if cerr := q.updateMemberInfoStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateMemberInfoStmt: %w", cerr)
		}
	}
	if q.updateNoticeStmt != nil {
		if cerr := q.updateNoticeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateNoticeStmt: %w", cerr)
		}
	}
	if q.updateOnlineStatusStmt != nil {
		if cerr := q.updateOnlineStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateOnlineStatusStmt: %w", cerr)
		}
	}
	if q.updateRemindStmt != nil {
		if cerr := q.updateRemindStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRemindStmt: %w", cerr)
		}
	}
	if q.updateRoleStmt != nil {
		if cerr := q.updateRoleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoleStmt: %w", cerr)
		}
	}
	if q.updateRoomScoreStmt != nil {
		if cerr := q.updateRoomScoreStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomScoreStmt: %w", cerr)
		}
	}
	if q.updateRoomStaffStmt != nil {
		if cerr := q.updateRoomStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStaffStmt: %w", cerr)
		}
	}
	if q.updateRoomStatusStmt != nil {
		if cerr := q.updateRoomStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRoomStatusStmt: %w", cerr)
		}
	}
	if q.updateSiteStmt != nil {
		if cerr := q.updateSiteStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateSiteStmt: %w", cerr)
		}
	}
	if q.updateStaffStmt != nil {
		if cerr := q.updateStaffStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffStmt: %w", cerr)
		}
	}
	if q.updateStaffAvatarStmt != nil {
		if cerr := q.updateStaffAvatarStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffAvatarStmt: %w", cerr)
		}
	}
	if q.updateStaffLoginStmt != nil {
		if cerr := q.updateStaffLoginStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffLoginStmt: %w", cerr)
		}
	}
	if q.updateStaffLogoutStmt != nil {
		if cerr := q.updateStaffLogoutStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffLogoutStmt: %w", cerr)
		}
	}
	if q.updateStaffServingStatusStmt != nil {
		if cerr := q.updateStaffServingStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffServingStatusStmt: %w", cerr)
		}
	}
	if q.updateStaffWithPasswordStmt != nil {
		if cerr := q.updateStaffWithPasswordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateStaffWithPasswordStmt: %w", cerr)
		}
	}
	if q.updateTagStmt != nil {
		if cerr := q.updateTagStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTagStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                           DBTX
	tx                           *sql.Tx
	acceptRoomStmt               *sql.Stmt
	checkFastReplyCategoryStmt   *sql.Stmt
	closeRoomStmt                *sql.Stmt
	constantSeederStmt           *sql.Stmt
	createFAQStmt                *sql.Stmt
	createFastReplyStmt          *sql.Stmt
	createFastReplyCategoryStmt  *sql.Stmt
	createMemberStmt             *sql.Stmt
	createMessageStmt            *sql.Stmt
	createNoticeStmt             *sql.Stmt
	createRemindStmt             *sql.Stmt
	createRoleStmt               *sql.Stmt
	createRoomStmt               *sql.Stmt
	createSiteStmt               *sql.Stmt
	createStaffStmt              *sql.Stmt
	createTagStmt                *sql.Stmt
	deleteFAQStmt                *sql.Stmt
	deleteFastReplyStmt          *sql.Stmt
	deleteNoticeStmt             *sql.Stmt
	deleteRemindStmt             *sql.Stmt
	deleteRoleStmt               *sql.Stmt
	deleteSiteStmt               *sql.Stmt
	deleteStaffStmt              *sql.Stmt
	deleteTagStmt                *sql.Stmt
	getAllAvailableFastReplyStmt *sql.Stmt
	getAllRolesStmt              *sql.Stmt
	getAllStaffsStmt             *sql.Stmt
	getAllTagStmt                *sql.Stmt
	getCsConfigStmt              *sql.Stmt
	getFAQStmt                   *sql.Stmt
	getFastReplyStmt             *sql.Stmt
	getGuestMemberStmt           *sql.Stmt
	getLastRoomMessageStmt       *sql.Stmt
	getLatestNoticeStmt          *sql.Stmt
	getMemberAvailableRoomStmt   *sql.Stmt
	getNormalMemberStmt          *sql.Stmt
	getNoticeStmt                *sql.Stmt
	getOnlineStaffCountStmt      *sql.Stmt
	getQueuingRoomCountStmt      *sql.Stmt
	getRemindStmt                *sql.Stmt
	getRoleStmt                  *sql.Stmt
	getRoomStmt                  *sql.Stmt
	getRoomInfoStmt              *sql.Stmt
	getServingRoomCountStmt      *sql.Stmt
	getSiteStmt                  *sql.Stmt
	getSiteByCodeStmt            *sql.Stmt
	getStaffStmt                 *sql.Stmt
	getStaffCountByRoleIdStmt    *sql.Stmt
	getStaffServingRoomCountStmt *sql.Stmt
	getTagStmt                   *sql.Stmt
	listActiveRemindStmt         *sql.Stmt
	listAvailableFAQStmt         *sql.Stmt
	listAvailableStaffStmt       *sql.Stmt
	listAvailableTagStmt         *sql.Stmt
	listFastReplyCategoryStmt    *sql.Stmt
	listMemberRoomMessageStmt    *sql.Stmt
	listQueuingRoomStmt          *sql.Stmt
	listReportDailyStaffStmt     *sql.Stmt
	listReportDailyTagStmt       *sql.Stmt
	listSiteStmt                 *sql.Stmt
	listStaffRoomMessageStmt     *sql.Stmt
	listStaffServingRoomStmt     *sql.Stmt
	roleSeederStmt               *sql.Stmt
	staffLoginStmt               *sql.Stmt
	staffSeederStmt              *sql.Stmt
	tagSeederStmt                *sql.Stmt
	updateCsConfigStmt           *sql.Stmt
	updateFAQStmt                *sql.Stmt
	updateFastReplyStmt          *sql.Stmt
	updateMemberInfoStmt         *sql.Stmt
	updateNoticeStmt             *sql.Stmt
	updateOnlineStatusStmt       *sql.Stmt
	updateRemindStmt             *sql.Stmt
	updateRoleStmt               *sql.Stmt
	updateRoomScoreStmt          *sql.Stmt
	updateRoomStaffStmt          *sql.Stmt
	updateRoomStatusStmt         *sql.Stmt
	updateSiteStmt               *sql.Stmt
	updateStaffStmt              *sql.Stmt
	updateStaffAvatarStmt        *sql.Stmt
	updateStaffLoginStmt         *sql.Stmt
	updateStaffLogoutStmt        *sql.Stmt
	updateStaffServingStatusStmt *sql.Stmt
	updateStaffWithPasswordStmt  *sql.Stmt
	updateTagStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                           tx,
		tx:                           tx,
		acceptRoomStmt:               q.acceptRoomStmt,
		checkFastReplyCategoryStmt:   q.checkFastReplyCategoryStmt,
		closeRoomStmt:                q.closeRoomStmt,
		constantSeederStmt:           q.constantSeederStmt,
		createFAQStmt:                q.createFAQStmt,
		createFastReplyStmt:          q.createFastReplyStmt,
		createFastReplyCategoryStmt:  q.createFastReplyCategoryStmt,
		createMemberStmt:             q.createMemberStmt,
		createMessageStmt:            q.createMessageStmt,
		createNoticeStmt:             q.createNoticeStmt,
		createRemindStmt:             q.createRemindStmt,
		createRoleStmt:               q.createRoleStmt,
		createRoomStmt:               q.createRoomStmt,
		createSiteStmt:               q.createSiteStmt,
		createStaffStmt:              q.createStaffStmt,
		createTagStmt:                q.createTagStmt,
		deleteFAQStmt:                q.deleteFAQStmt,
		deleteFastReplyStmt:          q.deleteFastReplyStmt,
		deleteNoticeStmt:             q.deleteNoticeStmt,
		deleteRemindStmt:             q.deleteRemindStmt,
		deleteRoleStmt:               q.deleteRoleStmt,
		deleteSiteStmt:               q.deleteSiteStmt,
		deleteStaffStmt:              q.deleteStaffStmt,
		deleteTagStmt:                q.deleteTagStmt,
		getAllAvailableFastReplyStmt: q.getAllAvailableFastReplyStmt,
		getAllRolesStmt:              q.getAllRolesStmt,
		getAllStaffsStmt:             q.getAllStaffsStmt,
		getAllTagStmt:                q.getAllTagStmt,
		getCsConfigStmt:              q.getCsConfigStmt,
		getFAQStmt:                   q.getFAQStmt,
		getFastReplyStmt:             q.getFastReplyStmt,
		getGuestMemberStmt:           q.getGuestMemberStmt,
		getLastRoomMessageStmt:       q.getLastRoomMessageStmt,
		getLatestNoticeStmt:          q.getLatestNoticeStmt,
		getMemberAvailableRoomStmt:   q.getMemberAvailableRoomStmt,
		getNormalMemberStmt:          q.getNormalMemberStmt,
		getNoticeStmt:                q.getNoticeStmt,
		getOnlineStaffCountStmt:      q.getOnlineStaffCountStmt,
		getQueuingRoomCountStmt:      q.getQueuingRoomCountStmt,
		getRemindStmt:                q.getRemindStmt,
		getRoleStmt:                  q.getRoleStmt,
		getRoomStmt:                  q.getRoomStmt,
		getRoomInfoStmt:              q.getRoomInfoStmt,
		getServingRoomCountStmt:      q.getServingRoomCountStmt,
		getSiteStmt:                  q.getSiteStmt,
		getSiteByCodeStmt:            q.getSiteByCodeStmt,
		getStaffStmt:                 q.getStaffStmt,
		getStaffCountByRoleIdStmt:    q.getStaffCountByRoleIdStmt,
		getStaffServingRoomCountStmt: q.getStaffServingRoomCountStmt,
		getTagStmt:                   q.getTagStmt,
		listActiveRemindStmt:         q.listActiveRemindStmt,
		listAvailableFAQStmt:         q.listAvailableFAQStmt,
		listAvailableStaffStmt:       q.listAvailableStaffStmt,
		listAvailableTagStmt:         q.listAvailableTagStmt,
		listFastReplyCategoryStmt:    q.listFastReplyCategoryStmt,
		listMemberRoomMessageStmt:    q.listMemberRoomMessageStmt,
		listQueuingRoomStmt:          q.listQueuingRoomStmt,
		listReportDailyStaffStmt:     q.listReportDailyStaffStmt,
		listReportDailyTagStmt:       q.listReportDailyTagStmt,
		listSiteStmt:                 q.listSiteStmt,
		listStaffRoomMessageStmt:     q.listStaffRoomMessageStmt,
		listStaffServingRoomStmt:     q.listStaffServingRoomStmt,
		roleSeederStmt:               q.roleSeederStmt,
		staffLoginStmt:               q.staffLoginStmt,
		staffSeederStmt:              q.staffSeederStmt,
		tagSeederStmt:                q.tagSeederStmt,
		updateCsConfigStmt:           q.updateCsConfigStmt,
		updateFAQStmt:                q.updateFAQStmt,
		updateFastReplyStmt:          q.updateFastReplyStmt,
		updateMemberInfoStmt:         q.updateMemberInfoStmt,
		updateNoticeStmt:             q.updateNoticeStmt,
		updateOnlineStatusStmt:       q.updateOnlineStatusStmt,
		updateRemindStmt:             q.updateRemindStmt,
		updateRoleStmt:               q.updateRoleStmt,
		updateRoomScoreStmt:          q.updateRoomScoreStmt,
		updateRoomStaffStmt:          q.updateRoomStaffStmt,
		updateRoomStatusStmt:         q.updateRoomStatusStmt,
		updateSiteStmt:               q.updateSiteStmt,
		updateStaffStmt:              q.updateStaffStmt,
		updateStaffAvatarStmt:        q.updateStaffAvatarStmt,
		updateStaffLoginStmt:         q.updateStaffLoginStmt,
		updateStaffLogoutStmt:        q.updateStaffLogoutStmt,
		updateStaffServingStatusStmt: q.updateStaffServingStatusStmt,
		updateStaffWithPasswordStmt:  q.updateStaffWithPasswordStmt,
		updateTagStmt:                q.updateTagStmt,
	}
}
