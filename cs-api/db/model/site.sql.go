// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: site.sql

package model

import (
	"context"
	"time"

	"cs-api/internal/types"
)

const createSite = `-- name: CreateSite :exec
INSERT INTO site (name, code, status, created_by, created_at, updated_by, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateSiteParams struct {
	Name      string       `db:"name" json:"name"`
	Code      string       `db:"code" json:"code"`
	Status    types.Status `db:"status" json:"status"`
	CreatedBy int64        `db:"created_by" json:"created_by"`
	CreatedAt time.Time    `db:"created_at" json:"created_at"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateSite(ctx context.Context, arg CreateSiteParams) error {
	_, err := q.exec(ctx, q.createSiteStmt, createSite,
		arg.Name,
		arg.Code,
		arg.Status,
		arg.CreatedBy,
		arg.CreatedAt,
		arg.UpdatedBy,
		arg.UpdatedAt,
	)
	return err
}

const deleteSite = `-- name: DeleteSite :exec
DELETE
FROM site
WHERE id = ?
`

func (q *Queries) DeleteSite(ctx context.Context, id int64) error {
	_, err := q.exec(ctx, q.deleteSiteStmt, deleteSite, id)
	return err
}

const getSite = `-- name: GetSite :one
SELECT name, code, status
FROM site
WHERE id = ? LIMIT 1
`

type GetSiteRow struct {
	Name   string       `db:"name" json:"name"`
	Code   string       `db:"code" json:"code"`
	Status types.Status `db:"status" json:"status"`
}

func (q *Queries) GetSite(ctx context.Context, id int64) (GetSiteRow, error) {
	row := q.queryRow(ctx, q.getSiteStmt, getSite, id)
	var i GetSiteRow
	err := row.Scan(&i.Name, &i.Code, &i.Status)
	return i, err
}

const getSiteByCode = `-- name: GetSiteByCode :one
select id, name, status
from site
where code = ?
  and status = 1
`

type GetSiteByCodeRow struct {
	ID     int64        `db:"id" json:"id"`
	Name   string       `db:"name" json:"name"`
	Status types.Status `db:"status" json:"status"`
}

func (q *Queries) GetSiteByCode(ctx context.Context, code string) (GetSiteByCodeRow, error) {
	row := q.queryRow(ctx, q.getSiteByCodeStmt, getSiteByCode, code)
	var i GetSiteByCodeRow
	err := row.Scan(&i.ID, &i.Name, &i.Status)
	return i, err
}

const listSite = `-- name: ListSite :many
select id, name, code, status
from site
`

type ListSiteRow struct {
	ID     int64        `db:"id" json:"id"`
	Name   string       `db:"name" json:"name"`
	Code   string       `db:"code" json:"code"`
	Status types.Status `db:"status" json:"status"`
}

func (q *Queries) ListSite(ctx context.Context) ([]ListSiteRow, error) {
	rows, err := q.query(ctx, q.listSiteStmt, listSite)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSiteRow{}
	for rows.Next() {
		var i ListSiteRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSite = `-- name: UpdateSite :exec
UPDATE site
SET name       = ?,
    code     = ?,
    status     = ?,
    updated_by = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateSiteParams struct {
	Name      string       `db:"name" json:"name"`
	Code      string       `db:"code" json:"code"`
	Status    types.Status `db:"status" json:"status"`
	UpdatedBy int64        `db:"updated_by" json:"updated_by"`
	UpdatedAt time.Time    `db:"updated_at" json:"updated_at"`
	ID        int64        `db:"id" json:"id"`
}

func (q *Queries) UpdateSite(ctx context.Context, arg UpdateSiteParams) error {
	_, err := q.exec(ctx, q.updateSiteStmt, updateSite,
		arg.Name,
		arg.Code,
		arg.Status,
		arg.UpdatedBy,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
