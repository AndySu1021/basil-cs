// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/interface/service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "cs-api/db/model"
	pkg "cs-api/pkg"
	types "cs-api/pkg/types"
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
)

// MockIAuthService is a mock of IAuthService interface.
type MockIAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthServiceMockRecorder
}

// MockIAuthServiceMockRecorder is the mock recorder for MockIAuthService.
type MockIAuthServiceMockRecorder struct {
	mock *MockIAuthService
}

// NewMockIAuthService creates a new mock instance.
func NewMockIAuthService(ctrl *gomock.Controller) *MockIAuthService {
	mock := &MockIAuthService{ctrl: ctrl}
	mock.recorder = &MockIAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthService) EXPECT() *MockIAuthServiceMockRecorder {
	return m.recorder
}

// CheckPermission mocks base method.
func (m *MockIAuthService) CheckPermission(permission string) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPermission", permission)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// CheckPermission indicates an expected call of CheckPermission.
func (mr *MockIAuthServiceMockRecorder) CheckPermission(permission interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPermission", reflect.TypeOf((*MockIAuthService)(nil).CheckPermission), permission)
}

// GetClientInfo mocks base method.
func (m *MockIAuthService) GetClientInfo(ctx context.Context, clientType pkg.ClientType) (pkg.ClientInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientInfo", ctx, clientType)
	ret0, _ := ret[0].(pkg.ClientInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientInfo indicates an expected call of GetClientInfo.
func (mr *MockIAuthServiceMockRecorder) GetClientInfo(ctx, clientType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientInfo", reflect.TypeOf((*MockIAuthService)(nil).GetClientInfo), ctx, clientType)
}

// GetStaffInfo mocks base method.
func (m *MockIAuthService) GetStaffInfo(ctx context.Context, staffId int64) (model.GetStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffInfo", ctx, staffId)
	ret0, _ := ret[0].(model.GetStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffInfo indicates an expected call of GetStaffInfo.
func (mr *MockIAuthServiceMockRecorder) GetStaffInfo(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffInfo", reflect.TypeOf((*MockIAuthService)(nil).GetStaffInfo), ctx, staffId)
}

// Login mocks base method.
func (m *MockIAuthService) Login(ctx context.Context, username, password string) (pkg.ClientInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, username, password)
	ret0, _ := ret[0].(pkg.ClientInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIAuthServiceMockRecorder) Login(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthService)(nil).Login), ctx, username, password)
}

// Logout mocks base method.
func (m *MockIAuthService) Logout(ctx context.Context, userInfo pkg.ClientInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockIAuthServiceMockRecorder) Logout(ctx, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuthService)(nil).Logout), ctx, userInfo)
}

// SetClientInfo mocks base method.
func (m *MockIAuthService) SetClientInfo(clientType pkg.ClientType) gin.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetClientInfo", clientType)
	ret0, _ := ret[0].(gin.HandlerFunc)
	return ret0
}

// SetClientInfo indicates an expected call of SetClientInfo.
func (mr *MockIAuthServiceMockRecorder) SetClientInfo(clientType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetClientInfo", reflect.TypeOf((*MockIAuthService)(nil).SetClientInfo), clientType)
}

// MockIStaffService is a mock of IStaffService interface.
type MockIStaffService struct {
	ctrl     *gomock.Controller
	recorder *MockIStaffServiceMockRecorder
}

// MockIStaffServiceMockRecorder is the mock recorder for MockIStaffService.
type MockIStaffServiceMockRecorder struct {
	mock *MockIStaffService
}

// NewMockIStaffService creates a new mock instance.
func NewMockIStaffService(ctrl *gomock.Controller) *MockIStaffService {
	mock := &MockIStaffService{ctrl: ctrl}
	mock.recorder = &MockIStaffServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStaffService) EXPECT() *MockIStaffServiceMockRecorder {
	return m.recorder
}

// CreateStaff mocks base method.
func (m *MockIStaffService) CreateStaff(ctx context.Context, params model.CreateStaffParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaff", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStaff indicates an expected call of CreateStaff.
func (mr *MockIStaffServiceMockRecorder) CreateStaff(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaff", reflect.TypeOf((*MockIStaffService)(nil).CreateStaff), ctx, params)
}

// DeleteStaff mocks base method.
func (m *MockIStaffService) DeleteStaff(ctx context.Context, staffId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaff", ctx, staffId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaff indicates an expected call of DeleteStaff.
func (mr *MockIStaffServiceMockRecorder) DeleteStaff(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaff", reflect.TypeOf((*MockIStaffService)(nil).DeleteStaff), ctx, staffId)
}

// GetAllStaffs mocks base method.
func (m *MockIStaffService) GetAllStaffs(ctx context.Context) ([]model.GetAllStaffsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStaffs", ctx)
	ret0, _ := ret[0].([]model.GetAllStaffsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStaffs indicates an expected call of GetAllStaffs.
func (mr *MockIStaffServiceMockRecorder) GetAllStaffs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStaffs", reflect.TypeOf((*MockIStaffService)(nil).GetAllStaffs), ctx)
}

// GetStaff mocks base method.
func (m *MockIStaffService) GetStaff(ctx context.Context, staffId int64) (model.GetStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaff", ctx, staffId)
	ret0, _ := ret[0].(model.GetStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaff indicates an expected call of GetStaff.
func (mr *MockIStaffServiceMockRecorder) GetStaff(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaff", reflect.TypeOf((*MockIStaffService)(nil).GetStaff), ctx, staffId)
}

// ListAvailableStaff mocks base method.
func (m *MockIStaffService) ListAvailableStaff(ctx context.Context, staffId int64) ([]model.ListAvailableStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableStaff", ctx, staffId)
	ret0, _ := ret[0].([]model.ListAvailableStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableStaff indicates an expected call of ListAvailableStaff.
func (mr *MockIStaffServiceMockRecorder) ListAvailableStaff(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableStaff", reflect.TypeOf((*MockIStaffService)(nil).ListAvailableStaff), ctx, staffId)
}

// ListStaff mocks base method.
func (m *MockIStaffService) ListStaff(ctx context.Context, params types.ListStaffParams) ([]types.ListStaffRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaff", ctx, params)
	ret0, _ := ret[0].([]types.ListStaffRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListStaff indicates an expected call of ListStaff.
func (mr *MockIStaffServiceMockRecorder) ListStaff(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaff", reflect.TypeOf((*MockIStaffService)(nil).ListStaff), ctx, params)
}

// UpdateStaff mocks base method.
func (m *MockIStaffService) UpdateStaff(ctx context.Context, params interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaff", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaff indicates an expected call of UpdateStaff.
func (mr *MockIStaffServiceMockRecorder) UpdateStaff(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaff", reflect.TypeOf((*MockIStaffService)(nil).UpdateStaff), ctx, params)
}

// UpdateStaffServingStatus mocks base method.
func (m *MockIStaffService) UpdateStaffServingStatus(ctx context.Context, staffId int64, status types.StaffServingStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStaffServingStatus", ctx, staffId, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStaffServingStatus indicates an expected call of UpdateStaffServingStatus.
func (mr *MockIStaffServiceMockRecorder) UpdateStaffServingStatus(ctx, staffId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStaffServingStatus", reflect.TypeOf((*MockIStaffService)(nil).UpdateStaffServingStatus), ctx, staffId, status)
}

// MockIRoomService is a mock of IRoomService interface.
type MockIRoomService struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomServiceMockRecorder
}

// MockIRoomServiceMockRecorder is the mock recorder for MockIRoomService.
type MockIRoomServiceMockRecorder struct {
	mock *MockIRoomService
}

// NewMockIRoomService creates a new mock instance.
func NewMockIRoomService(ctrl *gomock.Controller) *MockIRoomService {
	mock := &MockIRoomService{ctrl: ctrl}
	mock.recorder = &MockIRoomServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoomService) EXPECT() *MockIRoomServiceMockRecorder {
	return m.recorder
}

// AcceptRoom mocks base method.
func (m *MockIRoomService) AcceptRoom(ctx context.Context, staffId, roomId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRoom", ctx, staffId, roomId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcceptRoom indicates an expected call of AcceptRoom.
func (mr *MockIRoomServiceMockRecorder) AcceptRoom(ctx, staffId, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRoom", reflect.TypeOf((*MockIRoomService)(nil).AcceptRoom), ctx, staffId, roomId)
}

// CloseRoom mocks base method.
func (m *MockIRoomService) CloseRoom(ctx context.Context, staffId, roomId, tagId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseRoom", ctx, staffId, roomId, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseRoom indicates an expected call of CloseRoom.
func (mr *MockIRoomServiceMockRecorder) CloseRoom(ctx, staffId, roomId, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseRoom", reflect.TypeOf((*MockIRoomService)(nil).CloseRoom), ctx, staffId, roomId, tagId)
}

// CreateRoom mocks base method.
func (m *MockIRoomService) CreateRoom(ctx context.Context, source types.RoomSource, userAgent string, memberId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom", ctx, source, userAgent, memberId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockIRoomServiceMockRecorder) CreateRoom(ctx, source, userAgent, memberId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIRoomService)(nil).CreateRoom), ctx, source, userAgent, memberId)
}

// GetMemberAvailableRoom mocks base method.
func (m *MockIRoomService) GetMemberAvailableRoom(ctx context.Context, memberId int64) (model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMemberAvailableRoom", ctx, memberId)
	ret0, _ := ret[0].(model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMemberAvailableRoom indicates an expected call of GetMemberAvailableRoom.
func (mr *MockIRoomServiceMockRecorder) GetMemberAvailableRoom(ctx, memberId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMemberAvailableRoom", reflect.TypeOf((*MockIRoomService)(nil).GetMemberAvailableRoom), ctx, memberId)
}

// GetRoomInfo mocks base method.
func (m *MockIRoomService) GetRoomInfo(ctx context.Context, roomId int64) (model.GetRoomInfoRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoomInfo", ctx, roomId)
	ret0, _ := ret[0].(model.GetRoomInfoRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoomInfo indicates an expected call of GetRoomInfo.
func (mr *MockIRoomServiceMockRecorder) GetRoomInfo(ctx, roomId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoomInfo", reflect.TypeOf((*MockIRoomService)(nil).GetRoomInfo), ctx, roomId)
}

// GetStaffServingRoomCount mocks base method.
func (m *MockIRoomService) GetStaffServingRoomCount(ctx context.Context, staffId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaffServingRoomCount", ctx, staffId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaffServingRoomCount indicates an expected call of GetStaffServingRoomCount.
func (mr *MockIRoomServiceMockRecorder) GetStaffServingRoomCount(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaffServingRoomCount", reflect.TypeOf((*MockIRoomService)(nil).GetStaffServingRoomCount), ctx, staffId)
}

// ListQueuingRoom mocks base method.
func (m *MockIRoomService) ListQueuingRoom(ctx context.Context) ([]model.ListQueuingRoomRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQueuingRoom", ctx)
	ret0, _ := ret[0].([]model.ListQueuingRoomRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQueuingRoom indicates an expected call of ListQueuingRoom.
func (mr *MockIRoomServiceMockRecorder) ListQueuingRoom(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQueuingRoom", reflect.TypeOf((*MockIRoomService)(nil).ListQueuingRoom), ctx)
}

// ListRoom mocks base method.
func (m *MockIRoomService) ListRoom(ctx context.Context, params types.ListRoomParams) ([]types.ListRoomRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoom", ctx, params)
	ret0, _ := ret[0].([]types.ListRoomRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRoom indicates an expected call of ListRoom.
func (mr *MockIRoomServiceMockRecorder) ListRoom(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoom", reflect.TypeOf((*MockIRoomService)(nil).ListRoom), ctx, params)
}

// ListStaffServingRoom mocks base method.
func (m *MockIRoomService) ListStaffServingRoom(ctx context.Context, staffId int64) ([]types.StaffRoom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStaffServingRoom", ctx, staffId)
	ret0, _ := ret[0].([]types.StaffRoom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStaffServingRoom indicates an expected call of ListStaffServingRoom.
func (mr *MockIRoomServiceMockRecorder) ListStaffServingRoom(ctx, staffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStaffServingRoom", reflect.TypeOf((*MockIRoomService)(nil).ListStaffServingRoom), ctx, staffId)
}

// TransferRoom mocks base method.
func (m *MockIRoomService) TransferRoom(ctx context.Context, staffId, roomId, toStaffId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransferRoom", ctx, staffId, roomId, toStaffId)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferRoom indicates an expected call of TransferRoom.
func (mr *MockIRoomServiceMockRecorder) TransferRoom(ctx, staffId, roomId, toStaffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferRoom", reflect.TypeOf((*MockIRoomService)(nil).TransferRoom), ctx, staffId, roomId, toStaffId)
}

// UpdateRoomScore mocks base method.
func (m *MockIRoomService) UpdateRoomScore(ctx context.Context, roomId int64, score int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomScore", ctx, roomId, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomScore indicates an expected call of UpdateRoomScore.
func (mr *MockIRoomServiceMockRecorder) UpdateRoomScore(ctx, roomId, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomScore", reflect.TypeOf((*MockIRoomService)(nil).UpdateRoomScore), ctx, roomId, score)
}

// UpdateRoomStatus mocks base method.
func (m *MockIRoomService) UpdateRoomStatus(ctx context.Context, params model.UpdateRoomStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRoomStatus", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRoomStatus indicates an expected call of UpdateRoomStatus.
func (mr *MockIRoomServiceMockRecorder) UpdateRoomStatus(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRoomStatus", reflect.TypeOf((*MockIRoomService)(nil).UpdateRoomStatus), ctx, params)
}

// MockIMessageService is a mock of IMessageService interface.
type MockIMessageService struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageServiceMockRecorder
}

// MockIMessageServiceMockRecorder is the mock recorder for MockIMessageService.
type MockIMessageServiceMockRecorder struct {
	mock *MockIMessageService
}

// NewMockIMessageService creates a new mock instance.
func NewMockIMessageService(ctrl *gomock.Controller) *MockIMessageService {
	mock := &MockIMessageService{ctrl: ctrl}
	mock.recorder = &MockIMessageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageService) EXPECT() *MockIMessageServiceMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockIMessageService) CreateMessage(ctx context.Context, params model.CreateMessageParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockIMessageServiceMockRecorder) CreateMessage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockIMessageService)(nil).CreateMessage), ctx, params)
}

// ListMessage mocks base method.
func (m *MockIMessageService) ListMessage(ctx context.Context, params types.ListMessageParams) ([]types.ListMessageRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessage", ctx, params)
	ret0, _ := ret[0].([]types.ListMessageRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMessage indicates an expected call of ListMessage.
func (mr *MockIMessageServiceMockRecorder) ListMessage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessage", reflect.TypeOf((*MockIMessageService)(nil).ListMessage), ctx, params)
}

// ListRoomMessage mocks base method.
func (m *MockIMessageService) ListRoomMessage(ctx context.Context, params interface{}) ([]model.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoomMessage", ctx, params)
	ret0, _ := ret[0].([]model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoomMessage indicates an expected call of ListRoomMessage.
func (mr *MockIMessageServiceMockRecorder) ListRoomMessage(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoomMessage", reflect.TypeOf((*MockIMessageService)(nil).ListRoomMessage), ctx, params)
}

// MockITagService is a mock of ITagService interface.
type MockITagService struct {
	ctrl     *gomock.Controller
	recorder *MockITagServiceMockRecorder
}

// MockITagServiceMockRecorder is the mock recorder for MockITagService.
type MockITagServiceMockRecorder struct {
	mock *MockITagService
}

// NewMockITagService creates a new mock instance.
func NewMockITagService(ctrl *gomock.Controller) *MockITagService {
	mock := &MockITagService{ctrl: ctrl}
	mock.recorder = &MockITagServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagService) EXPECT() *MockITagServiceMockRecorder {
	return m.recorder
}

// CreateTag mocks base method.
func (m *MockITagService) CreateTag(ctx context.Context, params model.CreateTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockITagServiceMockRecorder) CreateTag(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockITagService)(nil).CreateTag), ctx, params)
}

// DeleteTag mocks base method.
func (m *MockITagService) DeleteTag(ctx context.Context, tagId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, tagId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockITagServiceMockRecorder) DeleteTag(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockITagService)(nil).DeleteTag), ctx, tagId)
}

// GetTag mocks base method.
func (m *MockITagService) GetTag(ctx context.Context, tagId int64) (model.GetTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTag", ctx, tagId)
	ret0, _ := ret[0].(model.GetTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTag indicates an expected call of GetTag.
func (mr *MockITagServiceMockRecorder) GetTag(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTag", reflect.TypeOf((*MockITagService)(nil).GetTag), ctx, tagId)
}

// ListAvailableTag mocks base method.
func (m *MockITagService) ListAvailableTag(ctx context.Context) ([]model.ListAvailableTagRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableTag", ctx)
	ret0, _ := ret[0].([]model.ListAvailableTagRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableTag indicates an expected call of ListAvailableTag.
func (mr *MockITagServiceMockRecorder) ListAvailableTag(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableTag", reflect.TypeOf((*MockITagService)(nil).ListAvailableTag), ctx)
}

// ListTag mocks base method.
func (m *MockITagService) ListTag(ctx context.Context, params types.ListTagParams) ([]types.ListTagRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTag", ctx, params)
	ret0, _ := ret[0].([]types.ListTagRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTag indicates an expected call of ListTag.
func (mr *MockITagServiceMockRecorder) ListTag(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTag", reflect.TypeOf((*MockITagService)(nil).ListTag), ctx, params)
}

// UpdateTag mocks base method.
func (m *MockITagService) UpdateTag(ctx context.Context, params model.UpdateTagParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTag", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTag indicates an expected call of UpdateTag.
func (mr *MockITagServiceMockRecorder) UpdateTag(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTag", reflect.TypeOf((*MockITagService)(nil).UpdateTag), ctx, params)
}

// MockIFastReplyService is a mock of IFastReplyService interface.
type MockIFastReplyService struct {
	ctrl     *gomock.Controller
	recorder *MockIFastReplyServiceMockRecorder
}

// MockIFastReplyServiceMockRecorder is the mock recorder for MockIFastReplyService.
type MockIFastReplyServiceMockRecorder struct {
	mock *MockIFastReplyService
}

// NewMockIFastReplyService creates a new mock instance.
func NewMockIFastReplyService(ctrl *gomock.Controller) *MockIFastReplyService {
	mock := &MockIFastReplyService{ctrl: ctrl}
	mock.recorder = &MockIFastReplyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFastReplyService) EXPECT() *MockIFastReplyServiceMockRecorder {
	return m.recorder
}

// CheckCategory mocks base method.
func (m *MockIFastReplyService) CheckCategory(ctx context.Context, id int64) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCategory", ctx, id)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckCategory indicates an expected call of CheckCategory.
func (mr *MockIFastReplyServiceMockRecorder) CheckCategory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCategory", reflect.TypeOf((*MockIFastReplyService)(nil).CheckCategory), ctx, id)
}

// CreateCategory mocks base method.
func (m *MockIFastReplyService) CreateCategory(ctx context.Context, params model.CreateFastReplyCategoryParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockIFastReplyServiceMockRecorder) CreateCategory(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockIFastReplyService)(nil).CreateCategory), ctx, params)
}

// CreateFastReply mocks base method.
func (m *MockIFastReplyService) CreateFastReply(ctx context.Context, params model.CreateFastReplyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFastReply", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFastReply indicates an expected call of CreateFastReply.
func (mr *MockIFastReplyServiceMockRecorder) CreateFastReply(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFastReply", reflect.TypeOf((*MockIFastReplyService)(nil).CreateFastReply), ctx, params)
}

// DeleteFastReply mocks base method.
func (m *MockIFastReplyService) DeleteFastReply(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFastReply", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFastReply indicates an expected call of DeleteFastReply.
func (mr *MockIFastReplyServiceMockRecorder) DeleteFastReply(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFastReply", reflect.TypeOf((*MockIFastReplyService)(nil).DeleteFastReply), ctx, id)
}

// GetFastReply mocks base method.
func (m *MockIFastReplyService) GetFastReply(ctx context.Context, id int64) (model.FastReply, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFastReply", ctx, id)
	ret0, _ := ret[0].(model.FastReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFastReply indicates an expected call of GetFastReply.
func (mr *MockIFastReplyServiceMockRecorder) GetFastReply(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFastReply", reflect.TypeOf((*MockIFastReplyService)(nil).GetFastReply), ctx, id)
}

// ListCategory mocks base method.
func (m *MockIFastReplyService) ListCategory(ctx context.Context) ([]model.Constant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategory", ctx)
	ret0, _ := ret[0].([]model.Constant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategory indicates an expected call of ListCategory.
func (mr *MockIFastReplyServiceMockRecorder) ListCategory(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategory", reflect.TypeOf((*MockIFastReplyService)(nil).ListCategory), ctx)
}

// ListFastReply mocks base method.
func (m *MockIFastReplyService) ListFastReply(ctx context.Context, params types.ListFastReplyParams) ([]types.ListFastReplyRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFastReply", ctx, params)
	ret0, _ := ret[0].([]types.ListFastReplyRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFastReply indicates an expected call of ListFastReply.
func (mr *MockIFastReplyServiceMockRecorder) ListFastReply(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFastReply", reflect.TypeOf((*MockIFastReplyService)(nil).ListFastReply), ctx, params)
}

// ListFastReplyGroup mocks base method.
func (m *MockIFastReplyService) ListFastReplyGroup(ctx context.Context) ([]pkg.FastReplyGroupItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFastReplyGroup", ctx)
	ret0, _ := ret[0].([]pkg.FastReplyGroupItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFastReplyGroup indicates an expected call of ListFastReplyGroup.
func (mr *MockIFastReplyServiceMockRecorder) ListFastReplyGroup(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFastReplyGroup", reflect.TypeOf((*MockIFastReplyService)(nil).ListFastReplyGroup), ctx)
}

// UpdateFastReply mocks base method.
func (m *MockIFastReplyService) UpdateFastReply(ctx context.Context, params model.UpdateFastReplyParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFastReply", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFastReply indicates an expected call of UpdateFastReply.
func (mr *MockIFastReplyServiceMockRecorder) UpdateFastReply(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFastReply", reflect.TypeOf((*MockIFastReplyService)(nil).UpdateFastReply), ctx, params)
}

// MockIReportService is a mock of IReportService interface.
type MockIReportService struct {
	ctrl     *gomock.Controller
	recorder *MockIReportServiceMockRecorder
}

// MockIReportServiceMockRecorder is the mock recorder for MockIReportService.
type MockIReportServiceMockRecorder struct {
	mock *MockIReportService
}

// NewMockIReportService creates a new mock instance.
func NewMockIReportService(ctrl *gomock.Controller) *MockIReportService {
	mock := &MockIReportService{ctrl: ctrl}
	mock.recorder = &MockIReportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReportService) EXPECT() *MockIReportServiceMockRecorder {
	return m.recorder
}

// ListDailyStaffReport mocks base method.
func (m *MockIReportService) ListDailyStaffReport(ctx context.Context, startDate, endDate time.Time) ([]model.ListReportDailyStaffRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDailyStaffReport", ctx, startDate, endDate)
	ret0, _ := ret[0].([]model.ListReportDailyStaffRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDailyStaffReport indicates an expected call of ListDailyStaffReport.
func (mr *MockIReportServiceMockRecorder) ListDailyStaffReport(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDailyStaffReport", reflect.TypeOf((*MockIReportService)(nil).ListDailyStaffReport), ctx, startDate, endDate)
}

// ListDailyTagReport mocks base method.
func (m *MockIReportService) ListDailyTagReport(ctx context.Context, startDate, endDate time.Time) ([]pkg.DailyTagReportColumn, map[string]map[string]int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDailyTagReport", ctx, startDate, endDate)
	ret0, _ := ret[0].([]pkg.DailyTagReportColumn)
	ret1, _ := ret[1].(map[string]map[string]int32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListDailyTagReport indicates an expected call of ListDailyTagReport.
func (mr *MockIReportServiceMockRecorder) ListDailyTagReport(ctx, startDate, endDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDailyTagReport", reflect.TypeOf((*MockIReportService)(nil).ListDailyTagReport), ctx, startDate, endDate)
}

// MockICsConfigService is a mock of ICsConfigService interface.
type MockICsConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockICsConfigServiceMockRecorder
}

// MockICsConfigServiceMockRecorder is the mock recorder for MockICsConfigService.
type MockICsConfigServiceMockRecorder struct {
	mock *MockICsConfigService
}

// NewMockICsConfigService creates a new mock instance.
func NewMockICsConfigService(ctrl *gomock.Controller) *MockICsConfigService {
	mock := &MockICsConfigService{ctrl: ctrl}
	mock.recorder = &MockICsConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICsConfigService) EXPECT() *MockICsConfigServiceMockRecorder {
	return m.recorder
}

// GetCsConfig mocks base method.
func (m *MockICsConfigService) GetCsConfig(ctx context.Context) (types.CsConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCsConfig", ctx)
	ret0, _ := ret[0].(types.CsConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCsConfig indicates an expected call of GetCsConfig.
func (mr *MockICsConfigServiceMockRecorder) GetCsConfig(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCsConfig", reflect.TypeOf((*MockICsConfigService)(nil).GetCsConfig), ctx)
}

// UpdateCsConfig mocks base method.
func (m *MockICsConfigService) UpdateCsConfig(ctx context.Context, staffId int64, config types.CsConfig) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCsConfig", ctx, staffId, config)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCsConfig indicates an expected call of UpdateCsConfig.
func (mr *MockICsConfigServiceMockRecorder) UpdateCsConfig(ctx, staffId, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCsConfig", reflect.TypeOf((*MockICsConfigService)(nil).UpdateCsConfig), ctx, staffId, config)
}

// MockIMemberService is a mock of IMemberService interface.
type MockIMemberService struct {
	ctrl     *gomock.Controller
	recorder *MockIMemberServiceMockRecorder
}

// MockIMemberServiceMockRecorder is the mock recorder for MockIMemberService.
type MockIMemberServiceMockRecorder struct {
	mock *MockIMemberService
}

// NewMockIMemberService creates a new mock instance.
func NewMockIMemberService(ctrl *gomock.Controller) *MockIMemberService {
	mock := &MockIMemberService{ctrl: ctrl}
	mock.recorder = &MockIMemberServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMemberService) EXPECT() *MockIMemberServiceMockRecorder {
	return m.recorder
}

// GetOrCreateMember mocks base method.
func (m *MockIMemberService) GetOrCreateMember(ctx context.Context, name, deviceId string, siteId int64) (model.Member, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateMember", ctx, name, deviceId, siteId)
	ret0, _ := ret[0].(model.Member)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateMember indicates an expected call of GetOrCreateMember.
func (mr *MockIMemberServiceMockRecorder) GetOrCreateMember(ctx, name, deviceId, siteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateMember", reflect.TypeOf((*MockIMemberService)(nil).GetOrCreateMember), ctx, name, deviceId, siteId)
}

// ListMember mocks base method.
func (m *MockIMemberService) ListMember(ctx context.Context, params types.ListMemberParams) ([]types.ListMemberRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMember", ctx, params)
	ret0, _ := ret[0].([]types.ListMemberRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListMember indicates an expected call of ListMember.
func (mr *MockIMemberServiceMockRecorder) ListMember(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMember", reflect.TypeOf((*MockIMemberService)(nil).ListMember), ctx, params)
}

// UpdateMemberInfo mocks base method.
func (m *MockIMemberService) UpdateMemberInfo(ctx context.Context, params model.UpdateMemberInfoParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMemberInfo", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMemberInfo indicates an expected call of UpdateMemberInfo.
func (mr *MockIMemberServiceMockRecorder) UpdateMemberInfo(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMemberInfo", reflect.TypeOf((*MockIMemberService)(nil).UpdateMemberInfo), ctx, params)
}

// UpdateOnlineStatus mocks base method.
func (m *MockIMemberService) UpdateOnlineStatus(ctx context.Context, params model.UpdateOnlineStatusParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOnlineStatus", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOnlineStatus indicates an expected call of UpdateOnlineStatus.
func (mr *MockIMemberServiceMockRecorder) UpdateOnlineStatus(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOnlineStatus", reflect.TypeOf((*MockIMemberService)(nil).UpdateOnlineStatus), ctx, params)
}

// MockIRoleService is a mock of IRoleService interface.
type MockIRoleService struct {
	ctrl     *gomock.Controller
	recorder *MockIRoleServiceMockRecorder
}

// MockIRoleServiceMockRecorder is the mock recorder for MockIRoleService.
type MockIRoleServiceMockRecorder struct {
	mock *MockIRoleService
}

// NewMockIRoleService creates a new mock instance.
func NewMockIRoleService(ctrl *gomock.Controller) *MockIRoleService {
	mock := &MockIRoleService{ctrl: ctrl}
	mock.recorder = &MockIRoleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoleService) EXPECT() *MockIRoleServiceMockRecorder {
	return m.recorder
}

// CreateRole mocks base method.
func (m *MockIRoleService) CreateRole(ctx context.Context, params model.CreateRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIRoleServiceMockRecorder) CreateRole(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIRoleService)(nil).CreateRole), ctx, params)
}

// DeleteRole mocks base method.
func (m *MockIRoleService) DeleteRole(ctx context.Context, roleId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, roleId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIRoleServiceMockRecorder) DeleteRole(ctx, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIRoleService)(nil).DeleteRole), ctx, roleId)
}

// GetAllRoles mocks base method.
func (m *MockIRoleService) GetAllRoles(ctx context.Context) ([]model.GetAllRolesRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRoles", ctx)
	ret0, _ := ret[0].([]model.GetAllRolesRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRoles indicates an expected call of GetAllRoles.
func (mr *MockIRoleServiceMockRecorder) GetAllRoles(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRoles", reflect.TypeOf((*MockIRoleService)(nil).GetAllRoles), ctx)
}

// GetRole mocks base method.
func (m *MockIRoleService) GetRole(ctx context.Context, roleId int64) (model.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", ctx, roleId)
	ret0, _ := ret[0].(model.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRole indicates an expected call of GetRole.
func (mr *MockIRoleServiceMockRecorder) GetRole(ctx, roleId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockIRoleService)(nil).GetRole), ctx, roleId)
}

// ListRole mocks base method.
func (m *MockIRoleService) ListRole(ctx context.Context, params types.ListRoleParams) ([]types.ListRoleRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRole", ctx, params)
	ret0, _ := ret[0].([]types.ListRoleRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRole indicates an expected call of ListRole.
func (mr *MockIRoleServiceMockRecorder) ListRole(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRole", reflect.TypeOf((*MockIRoleService)(nil).ListRole), ctx, params)
}

// UpdateRole mocks base method.
func (m *MockIRoleService) UpdateRole(ctx context.Context, params model.UpdateRoleParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockIRoleServiceMockRecorder) UpdateRole(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIRoleService)(nil).UpdateRole), ctx, params)
}

// MockINoticeService is a mock of INoticeService interface.
type MockINoticeService struct {
	ctrl     *gomock.Controller
	recorder *MockINoticeServiceMockRecorder
}

// MockINoticeServiceMockRecorder is the mock recorder for MockINoticeService.
type MockINoticeServiceMockRecorder struct {
	mock *MockINoticeService
}

// NewMockINoticeService creates a new mock instance.
func NewMockINoticeService(ctrl *gomock.Controller) *MockINoticeService {
	mock := &MockINoticeService{ctrl: ctrl}
	mock.recorder = &MockINoticeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockINoticeService) EXPECT() *MockINoticeServiceMockRecorder {
	return m.recorder
}

// CreateNotice mocks base method.
func (m *MockINoticeService) CreateNotice(ctx context.Context, params model.CreateNoticeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNotice", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNotice indicates an expected call of CreateNotice.
func (mr *MockINoticeServiceMockRecorder) CreateNotice(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNotice", reflect.TypeOf((*MockINoticeService)(nil).CreateNotice), ctx, params)
}

// DeleteNotice mocks base method.
func (m *MockINoticeService) DeleteNotice(ctx context.Context, noticeId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNotice", ctx, noticeId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNotice indicates an expected call of DeleteNotice.
func (mr *MockINoticeServiceMockRecorder) DeleteNotice(ctx, noticeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNotice", reflect.TypeOf((*MockINoticeService)(nil).DeleteNotice), ctx, noticeId)
}

// GetLatestNotice mocks base method.
func (m *MockINoticeService) GetLatestNotice(ctx context.Context) (model.GetLatestNoticeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestNotice", ctx)
	ret0, _ := ret[0].(model.GetLatestNoticeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestNotice indicates an expected call of GetLatestNotice.
func (mr *MockINoticeServiceMockRecorder) GetLatestNotice(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestNotice", reflect.TypeOf((*MockINoticeService)(nil).GetLatestNotice), ctx)
}

// GetNotice mocks base method.
func (m *MockINoticeService) GetNotice(ctx context.Context, noticeId int64) (model.Notice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotice", ctx, noticeId)
	ret0, _ := ret[0].(model.Notice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNotice indicates an expected call of GetNotice.
func (mr *MockINoticeServiceMockRecorder) GetNotice(ctx, noticeId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotice", reflect.TypeOf((*MockINoticeService)(nil).GetNotice), ctx, noticeId)
}

// ListNotice mocks base method.
func (m *MockINoticeService) ListNotice(ctx context.Context, params types.ListNoticeParams) ([]types.ListNoticeRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotice", ctx, params)
	ret0, _ := ret[0].([]types.ListNoticeRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotice indicates an expected call of ListNotice.
func (mr *MockINoticeServiceMockRecorder) ListNotice(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotice", reflect.TypeOf((*MockINoticeService)(nil).ListNotice), ctx, params)
}

// UpdateNotice mocks base method.
func (m *MockINoticeService) UpdateNotice(ctx context.Context, params model.UpdateNoticeParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNotice", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNotice indicates an expected call of UpdateNotice.
func (mr *MockINoticeServiceMockRecorder) UpdateNotice(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNotice", reflect.TypeOf((*MockINoticeService)(nil).UpdateNotice), ctx, params)
}

// MockIRemindService is a mock of IRemindService interface.
type MockIRemindService struct {
	ctrl     *gomock.Controller
	recorder *MockIRemindServiceMockRecorder
}

// MockIRemindServiceMockRecorder is the mock recorder for MockIRemindService.
type MockIRemindServiceMockRecorder struct {
	mock *MockIRemindService
}

// NewMockIRemindService creates a new mock instance.
func NewMockIRemindService(ctrl *gomock.Controller) *MockIRemindService {
	mock := &MockIRemindService{ctrl: ctrl}
	mock.recorder = &MockIRemindServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRemindService) EXPECT() *MockIRemindServiceMockRecorder {
	return m.recorder
}

// CreateRemind mocks base method.
func (m *MockIRemindService) CreateRemind(ctx context.Context, params model.CreateRemindParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRemind", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRemind indicates an expected call of CreateRemind.
func (mr *MockIRemindServiceMockRecorder) CreateRemind(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRemind", reflect.TypeOf((*MockIRemindService)(nil).CreateRemind), ctx, params)
}

// DeleteRemind mocks base method.
func (m *MockIRemindService) DeleteRemind(ctx context.Context, remindId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRemind", ctx, remindId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRemind indicates an expected call of DeleteRemind.
func (mr *MockIRemindServiceMockRecorder) DeleteRemind(ctx, remindId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRemind", reflect.TypeOf((*MockIRemindService)(nil).DeleteRemind), ctx, remindId)
}

// GetRemind mocks base method.
func (m *MockIRemindService) GetRemind(ctx context.Context, remindId int64) (model.Remind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemind", ctx, remindId)
	ret0, _ := ret[0].(model.Remind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemind indicates an expected call of GetRemind.
func (mr *MockIRemindServiceMockRecorder) GetRemind(ctx, remindId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemind", reflect.TypeOf((*MockIRemindService)(nil).GetRemind), ctx, remindId)
}

// ListActiveRemind mocks base method.
func (m *MockIRemindService) ListActiveRemind(ctx context.Context) ([]model.ListActiveRemindRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListActiveRemind", ctx)
	ret0, _ := ret[0].([]model.ListActiveRemindRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListActiveRemind indicates an expected call of ListActiveRemind.
func (mr *MockIRemindServiceMockRecorder) ListActiveRemind(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListActiveRemind", reflect.TypeOf((*MockIRemindService)(nil).ListActiveRemind), ctx)
}

// ListRemind mocks base method.
func (m *MockIRemindService) ListRemind(ctx context.Context, params types.ListRemindParams) ([]types.ListRemindRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRemind", ctx, params)
	ret0, _ := ret[0].([]types.ListRemindRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListRemind indicates an expected call of ListRemind.
func (mr *MockIRemindServiceMockRecorder) ListRemind(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRemind", reflect.TypeOf((*MockIRemindService)(nil).ListRemind), ctx, params)
}

// UpdateRemind mocks base method.
func (m *MockIRemindService) UpdateRemind(ctx context.Context, params model.UpdateRemindParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemind", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRemind indicates an expected call of UpdateRemind.
func (mr *MockIRemindServiceMockRecorder) UpdateRemind(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemind", reflect.TypeOf((*MockIRemindService)(nil).UpdateRemind), ctx, params)
}

// MockIFAQService is a mock of IFAQService interface.
type MockIFAQService struct {
	ctrl     *gomock.Controller
	recorder *MockIFAQServiceMockRecorder
}

// MockIFAQServiceMockRecorder is the mock recorder for MockIFAQService.
type MockIFAQServiceMockRecorder struct {
	mock *MockIFAQService
}

// NewMockIFAQService creates a new mock instance.
func NewMockIFAQService(ctrl *gomock.Controller) *MockIFAQService {
	mock := &MockIFAQService{ctrl: ctrl}
	mock.recorder = &MockIFAQServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFAQService) EXPECT() *MockIFAQServiceMockRecorder {
	return m.recorder
}

// CreateFAQ mocks base method.
func (m *MockIFAQService) CreateFAQ(ctx context.Context, params model.CreateFAQParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFAQ", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFAQ indicates an expected call of CreateFAQ.
func (mr *MockIFAQServiceMockRecorder) CreateFAQ(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFAQ", reflect.TypeOf((*MockIFAQService)(nil).CreateFAQ), ctx, params)
}

// DeleteFAQ mocks base method.
func (m *MockIFAQService) DeleteFAQ(ctx context.Context, faqId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFAQ", ctx, faqId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFAQ indicates an expected call of DeleteFAQ.
func (mr *MockIFAQServiceMockRecorder) DeleteFAQ(ctx, faqId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFAQ", reflect.TypeOf((*MockIFAQService)(nil).DeleteFAQ), ctx, faqId)
}

// GetFAQ mocks base method.
func (m *MockIFAQService) GetFAQ(ctx context.Context, faqId int64) (model.GetFAQRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFAQ", ctx, faqId)
	ret0, _ := ret[0].(model.GetFAQRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFAQ indicates an expected call of GetFAQ.
func (mr *MockIFAQServiceMockRecorder) GetFAQ(ctx, faqId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFAQ", reflect.TypeOf((*MockIFAQService)(nil).GetFAQ), ctx, faqId)
}

// ListAvailableFAQ mocks base method.
func (m *MockIFAQService) ListAvailableFAQ(ctx context.Context) ([]model.ListAvailableFAQRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAvailableFAQ", ctx)
	ret0, _ := ret[0].([]model.ListAvailableFAQRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAvailableFAQ indicates an expected call of ListAvailableFAQ.
func (mr *MockIFAQServiceMockRecorder) ListAvailableFAQ(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAvailableFAQ", reflect.TypeOf((*MockIFAQService)(nil).ListAvailableFAQ), ctx)
}

// ListFAQ mocks base method.
func (m *MockIFAQService) ListFAQ(ctx context.Context, params types.ListFAQParams) ([]types.ListFAQRow, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFAQ", ctx, params)
	ret0, _ := ret[0].([]types.ListFAQRow)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListFAQ indicates an expected call of ListFAQ.
func (mr *MockIFAQServiceMockRecorder) ListFAQ(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFAQ", reflect.TypeOf((*MockIFAQService)(nil).ListFAQ), ctx, params)
}

// UpdateFAQ mocks base method.
func (m *MockIFAQService) UpdateFAQ(ctx context.Context, params model.UpdateFAQParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFAQ", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFAQ indicates an expected call of UpdateFAQ.
func (mr *MockIFAQServiceMockRecorder) UpdateFAQ(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFAQ", reflect.TypeOf((*MockIFAQService)(nil).UpdateFAQ), ctx, params)
}

// MockISiteService is a mock of ISiteService interface.
type MockISiteService struct {
	ctrl     *gomock.Controller
	recorder *MockISiteServiceMockRecorder
}

// MockISiteServiceMockRecorder is the mock recorder for MockISiteService.
type MockISiteServiceMockRecorder struct {
	mock *MockISiteService
}

// NewMockISiteService creates a new mock instance.
func NewMockISiteService(ctrl *gomock.Controller) *MockISiteService {
	mock := &MockISiteService{ctrl: ctrl}
	mock.recorder = &MockISiteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISiteService) EXPECT() *MockISiteServiceMockRecorder {
	return m.recorder
}

// CreateSite mocks base method.
func (m *MockISiteService) CreateSite(ctx context.Context, params model.CreateSiteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSite", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSite indicates an expected call of CreateSite.
func (mr *MockISiteServiceMockRecorder) CreateSite(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSite", reflect.TypeOf((*MockISiteService)(nil).CreateSite), ctx, params)
}

// DeleteSite mocks base method.
func (m *MockISiteService) DeleteSite(ctx context.Context, siteId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSite", ctx, siteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSite indicates an expected call of DeleteSite.
func (mr *MockISiteServiceMockRecorder) DeleteSite(ctx, siteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSite", reflect.TypeOf((*MockISiteService)(nil).DeleteSite), ctx, siteId)
}

// GetSite mocks base method.
func (m *MockISiteService) GetSite(ctx context.Context, siteId int64) (model.GetSiteRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSite", ctx, siteId)
	ret0, _ := ret[0].(model.GetSiteRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSite indicates an expected call of GetSite.
func (mr *MockISiteServiceMockRecorder) GetSite(ctx, siteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSite", reflect.TypeOf((*MockISiteService)(nil).GetSite), ctx, siteId)
}

// GetSiteByCode mocks base method.
func (m *MockISiteService) GetSiteByCode(ctx context.Context, code string) (model.GetSiteByCodeRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteByCode", ctx, code)
	ret0, _ := ret[0].(model.GetSiteByCodeRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteByCode indicates an expected call of GetSiteByCode.
func (mr *MockISiteServiceMockRecorder) GetSiteByCode(ctx, code interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteByCode", reflect.TypeOf((*MockISiteService)(nil).GetSiteByCode), ctx, code)
}

// ListSite mocks base method.
func (m *MockISiteService) ListSite(ctx context.Context) ([]model.ListSiteRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSite", ctx)
	ret0, _ := ret[0].([]model.ListSiteRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSite indicates an expected call of ListSite.
func (mr *MockISiteServiceMockRecorder) ListSite(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSite", reflect.TypeOf((*MockISiteService)(nil).ListSite), ctx)
}

// UpdateSite mocks base method.
func (m *MockISiteService) UpdateSite(ctx context.Context, params model.UpdateSiteParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSite", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSite indicates an expected call of UpdateSite.
func (mr *MockISiteServiceMockRecorder) UpdateSite(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSite", reflect.TypeOf((*MockISiteService)(nil).UpdateSite), ctx, params)
}

// MockICommonService is a mock of ICommonService interface.
type MockICommonService struct {
	ctrl     *gomock.Controller
	recorder *MockICommonServiceMockRecorder
}

// MockICommonServiceMockRecorder is the mock recorder for MockICommonService.
type MockICommonServiceMockRecorder struct {
	mock *MockICommonService
}

// NewMockICommonService creates a new mock instance.
func NewMockICommonService(ctrl *gomock.Controller) *MockICommonService {
	mock := &MockICommonService{ctrl: ctrl}
	mock.recorder = &MockICommonServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommonService) EXPECT() *MockICommonServiceMockRecorder {
	return m.recorder
}

// GetPanelData mocks base method.
func (m *MockICommonService) GetPanelData(ctx context.Context) (types.PanelData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPanelData", ctx)
	ret0, _ := ret[0].(types.PanelData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPanelData indicates an expected call of GetPanelData.
func (mr *MockICommonServiceMockRecorder) GetPanelData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPanelData", reflect.TypeOf((*MockICommonService)(nil).GetPanelData), ctx)
}
