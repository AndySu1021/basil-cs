// Code generated by MockGen. DO NOT EDIT.
// Source: internal/interface/script.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockILuaScript is a mock of ILuaScript interface.
type MockILuaScript struct {
	ctrl     *gomock.Controller
	recorder *MockILuaScriptMockRecorder
}

// MockILuaScriptMockRecorder is the mock recorder for MockILuaScript.
type MockILuaScriptMockRecorder struct {
	mock *MockILuaScript
}

// NewMockILuaScript creates a new mock instance.
func NewMockILuaScript(ctrl *gomock.Controller) *MockILuaScript {
	mock := &MockILuaScript{ctrl: ctrl}
	mock.recorder = &MockILuaScriptMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockILuaScript) EXPECT() *MockILuaScriptMockRecorder {
	return m.recorder
}

// RemoveMemberToken mocks base method.
func (m *MockILuaScript) RemoveMemberToken(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMemberToken", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMemberToken indicates an expected call of RemoveMemberToken.
func (mr *MockILuaScriptMockRecorder) RemoveMemberToken(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMemberToken", reflect.TypeOf((*MockILuaScript)(nil).RemoveMemberToken), ctx, name)
}

// RemoveStaffToken mocks base method.
func (m *MockILuaScript) RemoveStaffToken(ctx context.Context, id int64, username string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveStaffToken", ctx, id, username)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveStaffToken indicates an expected call of RemoveStaffToken.
func (mr *MockILuaScriptMockRecorder) RemoveStaffToken(ctx, id, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveStaffToken", reflect.TypeOf((*MockILuaScript)(nil).RemoveStaffToken), ctx, id, username)
}

// SetToken mocks base method.
func (m *MockILuaScript) SetToken(ctx context.Context, clientType, name, token string, value interface{}, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetToken", ctx, clientType, name, token, value, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetToken indicates an expected call of SetToken.
func (mr *MockILuaScriptMockRecorder) SetToken(ctx, clientType, name, token, value, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetToken", reflect.TypeOf((*MockILuaScript)(nil).SetToken), ctx, clientType, name, token, value, duration)
}

// StaffAssignRoom mocks base method.
func (m *MockILuaScript) StaffAssignRoom(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffAssignRoom", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StaffAssignRoom indicates an expected call of StaffAssignRoom.
func (mr *MockILuaScriptMockRecorder) StaffAssignRoom(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffAssignRoom", reflect.TypeOf((*MockILuaScript)(nil).StaffAssignRoom), ctx, id)
}

// StaffCloseRoom mocks base method.
func (m *MockILuaScript) StaffCloseRoom(ctx context.Context, staffId int64, memberName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffCloseRoom", ctx, staffId, memberName)
	ret0, _ := ret[0].(error)
	return ret0
}

// StaffCloseRoom indicates an expected call of StaffCloseRoom.
func (mr *MockILuaScriptMockRecorder) StaffCloseRoom(ctx, staffId, memberName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffCloseRoom", reflect.TypeOf((*MockILuaScript)(nil).StaffCloseRoom), ctx, staffId, memberName)
}

// StaffRegister mocks base method.
func (m *MockILuaScript) StaffRegister(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffRegister", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// StaffRegister indicates an expected call of StaffRegister.
func (mr *MockILuaScriptMockRecorder) StaffRegister(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffRegister", reflect.TypeOf((*MockILuaScript)(nil).StaffRegister), ctx, id)
}

// StaffTransferRoom mocks base method.
func (m *MockILuaScript) StaffTransferRoom(ctx context.Context, staffId, toStaffId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StaffTransferRoom", ctx, staffId, toStaffId)
	ret0, _ := ret[0].(error)
	return ret0
}

// StaffTransferRoom indicates an expected call of StaffTransferRoom.
func (mr *MockILuaScriptMockRecorder) StaffTransferRoom(ctx, staffId, toStaffId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StaffTransferRoom", reflect.TypeOf((*MockILuaScript)(nil).StaffTransferRoom), ctx, staffId, toStaffId)
}
